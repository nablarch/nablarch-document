===================================
全体構造
===================================
本節では業務機能JSPから使用する以下の各機能の構造について述べる。

  :doc:`jsp_page_templates`
    業務画面の内容のうち、業務機能領域を除く各共通領域の描画やHTMLヘッダ等の各種宣言について、
    **UI標準** に準拠した形で実装するJSPタグファイルおよびインクルードファイル群。

  :doc:`jsp_widgets`
    ボタンや検索結果テーブル、各種入力フィールドといった業務画面内に配置するUI部品について、
    **UI標準** に準拠した形で実装するJSPタグファイル群。

  :doc:`css_framework` 
    :doc:`jsp_page_templates` および :doc:`jsp_widgets` などの共通部品に対し
    **UI標準** に沿った統一的な外観を与える共通スタイル定義。
    また、デバイスサイズに応じた動的な表示調整を行う。

  :doc:`js_framework`
    **UI標準** の内容のうち、カレンダー日付入力部品のような、
    通常のHTMLの範疇では実現できないUI機能を実装するために、 :doc:`jsp_widgets`
    が使用する JavaScript部品群である。 
    

  :doc:`inbrowser_jsp_rendering`
    業務画面のJSPソースファイルをJavaScriptでレンダリングすることにより
    :doc:`jsp_page_templates` および :doc:`jsp_widgets` を用いて作成した
    ローカルディスク上のJSPファイルを通常のブラウザで直接開けるようにする仕組みである。
    これにより設計中の画面のイメージや動作デモを簡単に確認することができる。 

本番環境での外部ライブラリへの依存
-----------------------------------
上記機能の実装において、本番環境で下記の外部ライブラリを使用している。

  ============= ================ =================================================== =============
  ライブラリ名  類別             用途                                                ライセンス
  ============= ================ =================================================== =============
  require.js    JavaScript       JavaScriptの分割モジュール管理                      MIT          
  sugar.js      JavaScript       ECMAScript5互換関数を含むユーティリティAPI群の提供  ライセンスフリー    
  jQuery        JavaScript       DOM関連APIの簡易化およびブラウザ互換レイヤの提供    MIT
  font-awesome  css/webフォント  各種アイコン画像の提供                              MIT,SIL OFL 1.1
  ============= ================ =================================================== =============

なお、これらのライブラリを業務画面JSPから直接使用することは想定していない。

サーバ動作時の構成
--------------------------------
以下の図は、サーバ上の業務画面JSPをブラウザ上に表示する際、これらの機能がどのように
使用されるかを表す構成図である。
( :doc:`css_framework` はこの図には記述していない。)

  .. figure:: ../_image/architecture_overview_server.png
     :scale: 80
     :align: center

以下は、上図の依存関係を詳しく解説したものである。
 
  ========================= ======================== ========================================================================
  モジュール                依存対象                 詳細
  ========================= ======================== ========================================================================
  **業務画面JSP**           | UI部品ウィジェット     | UI標準の画面構成のうち業務機能領域を除く共通領域は
                            | 業務画面テンプレート     :doc:`jsp_page_templates` を使用して描画する。
                            | タグライブラリ         | 業務画面領域内のUI要素の描画には :doc:`jsp_widgets` を使用する。
                                                     | 業務画面JSPから直接使用するタグライブラリは以下のものに限る。

                                                       **変数管理・フロー制御に関するタグ**
                                                         **<n:write>** / **<n:set>** / **<c:if>** / **<n:forInputPage>** など

                                                       **ページ遷移制御に関するタグ**
                                                         **<n:form>** / **<n:param>** など

                                                     | また、JavaScriptを業務画面JSPに直接記述することはせず、
                                                       :doc:`jsp_widgets` を通じて使用する。
  
  :doc:`jsp_page_templates` | UI部品ウィジェット     | 基本的に業務画面JSPと同等の扱いとなる。
                            | タグライブラリ           ただし、HTMLのヘッドタグなどを記述するために
                                                       **<n:script>** **<n:nocache>** などのタグライブラリを使用する。

  :doc:`jsp_widgets`        | JavaScript UI部品      | 各種のタグライブラリ及びHTMLにより記述される。
                            | タグライブラリ           HTMLのみで実現できないクライアントのUIについては **JavaScript UI部品**
                                                       に依存する。
                                                     | :doc:`jsp_widgets` が出力するHTMLとクライアント側の
                                                       :doc:`js_framework` との紐付けは **マーカーCSS** によって行うため、
                                                       :doc:`jsp_widgets` が直接JavaScriptを使用することは無い。
                                                       (詳細は :doc:`js_framework` の項を参照すること。)
                                                   
  :doc:`js_framework`       | サードパーティJS       | 標準のJavaScript(ECMA)および、DOM APIに加えて上述した
                                                       **サードパーティJSライブラリ** を使用する。

  ========================= ======================== ========================================================================

ローカル動作時の構成
--------------------------------
ローカルデモ動作では、 `web_project/ui_demo/ローカル画面確認.bat` で起動されるHTTPサーバで\
業務画面JSPを表示することで、JavaScript上でJSPタグをレンダリングして表示できる。

以下の図はローカルデモ動作におけるアーキテクチャ構成を表した図である。

  .. figure:: ../_image/architecture_overview_local.png
     :scale: 80
     :align: center

この図と、先のサーバ動作での構成図とを比較した場合、
ローカルデモ動作では全てブラウザ上で動作するという点を除けば、以下の構成は全く同じであることがわかる。

  - 業務画面JSP
  - :doc:`jsp_page_templates`
  - :doc:`jsp_widgets`
  - :doc:`js_framework`
  - サードパーティJSライブラリ

両者で異なるのは、JSPの解釈(HTMLへの変換)を担う部分である。
サーバ動作時ではJSPの解釈は **タグライブラリ** およびアプリケーションサーバ上の
**JSPレンダリングエンジン** が行っているが、ローカル動作ではこの処理を :doc:`inbrowser_jsp_rendering` および
そこから呼び出される **タグライブラリ スタブJS** が代替する。

**タグライブラリ スタブJS** は :doc:`inbrowser_jsp_rendering` 機能の一部であり、
JSPタグライブラリの挙動についてブラウザ上で一定のエミュレーションを行う機能である。
サポートするタグライブラリの一覧および、エミュレーション処理の内容については :doc:`../reference_jsp_widgets/index` を参照すること。

