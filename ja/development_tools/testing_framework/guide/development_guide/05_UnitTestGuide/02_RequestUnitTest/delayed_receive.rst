====================================================================
リクエスト単体テストの実施方法（応答不要メッセージ受信処理）
====================================================================

--------------------
概要
--------------------
応答不要メッセージ処理用のアクションクラスは、Nablarchの一部として提供される。
このため、リクエスト単体テストではこのアクションクラスを使用して、以下の\ `テスト対象の成果物`_ の確認を行う。

**※ 他のテストのようにアクションクラスに対する条件網羅や、限界値テストなどは実施不要である。**

テスト対象の成果物
===================
* 電文のレイアウトを定義したフォーマット定義ファイル
* データベースへ電文を登録する際に使用するFormクラス
* データベースへ電文を登録するためのINSERT文

--------------------
テストクラスの書き方
--------------------

テストクラスは以下の条件を満たすように作成する。

* テストクラスのパッケージは、テスト対象機能のパッケージとする。
* <電文のリクエストID>RequestTestというクラス名でテストクラスを作成する。
* \ ``nablarch.test.core.messaging.MessagingReceiveTestSupport``\ を継承する。

例えば、テスト対象機能のパッケージがnablarch.sample.ss21AA、電文のリクエストIDがRM21AA100だとすると、テストクラスは以下のようになる。

.. code-block:: java

  package nablarch.sample.ss21AA;
  
  // ～中略～

  public class RM21AA100RequestTest extends MessagingReceiveTestSupport {

--------------------
テストデータの書き方
--------------------
`テスト対象の成果物`_ のテストを行うために必要なテストデータの記述方法を説明する。

テストデータの記述方法は、\ :ref:`real_request_test`\ を参照すること。
本項では、\ :ref:`real_request_test`\ と記述方法が異なる箇所を解説する。


各種期待値
==============

レスポンスメッセージ
--------------------

応答不要メッセージ受信処理では、応答電文は存在しないため応答電文が期待値通りであることを確認する必要はない。期待するデータベースの状態のみ確認する。

このため、レスポンスメッセージ(「MESSAGE=expectedMessages」)の記述は不要である。
