----------------------------------------------------------
Initial Setup of RESTful Web Service Project
----------------------------------------------------------

The following is procedures of initial setup of the RESTful web service project:

* Generate RESTful web service project
* Confirm communications of RESTful web service project


Preliminary preparations
-------------------------------------------------------------

Install one of the following for use with :ref:`setup_webService_startup_test`.

* Firefox
* Chrome


Overview of the generated project
----------------------------------------------------------

The overview of the project generated by this procedure is as follows.

.. list-table::
  :header-rows: 1
  :class: white-space-normal
  :widths: 8,20

  * - Item
    - Description
  * - Project type
    - Maven project
  * - Project composition
    - Single project composition
  * - DB used
    - H2 Database Engine (embedded in the application)
  * - Built-in adapter
    - * Adapter for Jersey (for details, see :ref:`jaxrs_adaptor`)
      * Routing adapter (for details, see :ref:`router_adaptor`)
  * - What is included in the generated project?
    - The following is included in the generated project:

      * Basic configuration for the RESTful web service
      * RESTful web service for communication confirmation
      * Initial configuration of the tool that operates in conjunction with Maven (is imported by referring to :ref:`about_maven_parent_module`).


For relationship with other projects and directories, see :doc:`../MavenModuleStructures/index`.


.. _firstStepGenerateJaxrsBlankProject:

Create blank project
----------------------------------------------------------

Generate a blank project using the archetypes provided by Nablarch.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute the mvn command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use `Maven Archetype Plugin(external site) <https://maven.apache.org/archetype/maven-archetype-plugin/usage.html>`_ to generate a blank project.

Change the current directory to the directory where the blank project (can be any directory) is to be created, and place the following file.

:download:`Batch file <bat/generateWebServiceProject.bat>`

After placing the file, specify the necessary parameters in the arguments and execute the bat file.

generateWebServiceProject.bat |nablarch_version| <<groupId>> <<artifactId>> <<version>> <<package(optional)>>

The parameters configured in the above command are as follows.
If you want to change the version of Nablarch, change |nablarch_version|.

=========== ================================================= =======================
Input item  Description                                       Configuration example
=========== ================================================= =======================
groupId      Group ID (normally, enter the package name)      ``com.example``
artifactId   Artifact ID                                      ``myapp-jaxrs``
version      Version number                                   ``0.1.0``
package      Package (normally the same as group ID)          ``com.example``
=========== ================================================= =======================

.. important::
   Item groupId and package are mapped to the Java package name.
   Use lowercase letters, numbers, and dots for these input values, and do not use hyphens.


If the command ends normally, a blank project is created under the current directory.


.. _firstStepWebServiceStartupTest:

Communication confirmation
-------------------------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Automated test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following unit tests are included in the project generated from the archetype.

.. list-table::
  :header-rows: 1
  :class: white-space-normal
  :widths: 12,20

  * - Unit test classes
    - Test content
  * - SampleActionTest
    - Check if a test with DB access is possible.



Execute the unit test and confirm that the blank project was successfully generated.


Execute the following command.

.. code-block:: text

  cd myapp-jaxrs
  mvn test

.. tip::

  "clean" and "test" of Maven used here are Built-in Lifecycle of Maven.

  For information on other lifecycles that exist, see `Built-in Lifecycle Bindings(external site) <https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings>`_.


If the execution is successful, the log given below will be output to the console.

.. code-block:: text

  (omitted)
  [INFO] ----------------------< com.example:myapp-jaxrs >-----------------------
  [INFO] Building myapp-jaxrs 0.1.0
  [INFO] --------------------------------[ war ]---------------------------------
  (omitted)
  [INFO] Results:
  [INFO]
  [INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0
  [INFO]
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD SUCCESS
  [INFO] ------------------------------------------------------------------------
  (rest is omitted)


.. _setup_webService_startup_test:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Launch confirmation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following service is included in the generated project.

.. list-table::
  :header-rows: 1
  :class: white-space-normal
  :widths: 10,20

  * - Class implementing the service
    - Details
  * - SampleAction
    - Service for communication confirmation of Nablarch functions commonly used when implementing RESTful web service.

      Some services use JSON and other services use XML for the response.

Confirm that the blank project has been successfully generated by calling the service from the browser.


Launching the service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the current directory is not yet moved to the generated project, move the directory.

.. code-block:: text

  cd myapp-jaxrs

Execute the following command to build the RESTful web service.

.. code-block:: text

  mvn compile


Execute the following command to start the application for communication confirmation of RESTful web service.

.. code-block:: text

  mvn jetty:run

.. tip::

  "jetty:run" of Maven used in the above command example is a specification to use the run goal of the Jetty Maven Plugin.

  For information on the Jetty Maven Plugin, see `Jetty Maven Plugin (external site) <https://www.eclipse.org/jetty/documentation/jetty-12/programming-guide/index.html#jetty-maven-plugin>`_.


If the launch is successful, the log given below will be output to the console.

.. code-block:: text

  (omitted)
  2020-04-28 08:46:53.366 -INFO- nablarch.fw.web.servlet.NablarchServletContextListener [null] boot_proc = [] proc_sys = [jaxrs] req_id = [null] usr_id = [null] [nablarch.fw.web.servlet.NablarchServletContextListener#contextInitialized] initialization completed.


Call a service that uses JSON for the response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start FireFox or Chrome and enter the following URL in the address bar.


.. code-block:: text

  http://localhost:9080/find/json ("/" is not required at the end as shown)


If successful, the browser will display a JSON format response as shown below.

.. code-block:: text

  [{"userId":1,"kanjiName":"名部楽太郎","kanaName":"なぶらくたろう"},{"userId":2,"kanjiName":"名部楽次郎","kanaName":"なぶらくじろう"}]


.. tip::

  If Internet Explorer 11 is used instead of FireFox or Chrome, a confirmation message asking if you want to download it will be displayed.


Call a service that uses XML for the response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start FireFox or Chrome and enter the following URL in the address bar.


.. code-block:: text

  http://localhost:9080/find/xml ("/" is not required at the end as shown)


If successful, the browser will display an XML format response as shown below.

.. code-block:: xml

  <userList>
    <sampleUser>
      <kanaName>なぶらくたろう</kanaName>
      <kanjiName>名部楽太郎</kanjiName>
      <userId>1</userId>
    </sampleUser>
    <sampleUser>
      <kanaName>なぶらくじろう</kanaName>
      <kanjiName>名部楽次郎</kanjiName>
      <userId>2</userId>
    </sampleUser>
  </userList>


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If the communication confirmation fails for some reason
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the communication confirmation fails for some unknown reason, the correct procedure may not have been followed in some part.

If the reason is not known, try again from :ref:`firstStepGenerateJaxrsBlankProject`.



Supplementary notes
--------------------

For information on the method of confirming the data of H2 and tools included in the blank project, see :doc:`../firstStep_appendix/firststep_complement`.
