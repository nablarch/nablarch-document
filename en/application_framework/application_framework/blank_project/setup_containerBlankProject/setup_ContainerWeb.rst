----------------------------------------------------------
Initial Setup of Web Project for Container
----------------------------------------------------------

The following is procedures of initial setup of the web project for container:

* Generating web project for container
* Confirm communications of web project
* Create a container image
* Run Container Image


Overview of the generated project
----------------------------------------------------------

The overview of the project generated by this procedure is as follows.

.. list-table::
  :header-rows: 1
  :class: white-space-normal
  :widths: 8,20

  * - Item
    - Description
  * - Project Type
    - Maven project
  * - Project composition
    - Single project composition
  * - DB used
    - H2 Database Engine (embedded in the application)
  * - Built-in adapter
    - Routing adapter (for details, see :ref:`router_adaptor`)
  * - What is included in the generated project?
    - The following is included in the generated project:
       
      * Basic configuration for the Nablarch web application
      * Web application for communication confirmation
      * Initial configuration of the tool that operates in conjunction with Maven (is imported by referring to :ref:`about_maven_parent_module`).


For relationship with other projects and directories, see :doc:`../MavenModuleStructures/index`.


.. _firstStepGenerateContainerWebBlankProject:

Create blank project
----------------------------------------------------------

Generate a blank project using the archetypes provided by Nablarch.

Execute the mvn command
~~~~~~~~~~~~~~~~~~~~~~~

Use `Maven Archetype Plugin(external site) <https://maven.apache.org/archetype/maven-archetype-plugin/usage.html>`_ to generate a blank project.

Change the current directory to the directory where the blank project (can be any directory) is to be created.

Execute the following command.

.. code-block:: bat

  mvn archetype:generate -DarchetypeGroupId=com.nablarch.archetype -DarchetypeArtifactId=nablarch-container-web-archetype -DarchetypeVersion={nablarch_version}

The version of Nablarch used in the above command is |nablarch_version|. If you want to change the version, change the following parameters.

.. list-table::
  :header-rows: 1
  :class: white-space-normal
  :widths: 6,20

  * - Set value
    - Description
  * - archetypeVersion
    - Specify the version of the archetype you wish to use. (Nablarch 6u2 or later must be specified)

Enter project information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When the above command is executed, you will be asked to enter the following information about the blank project to be generated.

=========== ================================================= =======================
Input item  Description                                       Configuration example
=========== ================================================= =======================
groupId      Group ID (normally, enter the package name)      ``com.example``
artifactId   Artifact ID                                      ``myapp-container-web``
version      Version number                                   ``0.1.0``
package      Package (normally the same as group ID)          ``com.example``
=========== ================================================= =======================

.. important::
   Item groupId and package are mapped to the Java package name.
   Use lowercase letters, numbers, and dots for these input values, and do not use hyphens.

When you have finished entering project information, Y: : will appear.

 * Enter 「Y」 if you want to generate a template based on the information you have entered.
 * Enter 「N」 if you wish to redo the project information entry.

If the command ends normally, a blank project is created under the current directory.


.. _firstStepContainerWebStartupTest:

Communication confirmation
-------------------------------------------

The communication confirmation mechanism and procedures are the same as for a normal web project. Thus, see :ref:`Initial Setup of Web Project <firstStepWebStartupTest>`.

.. note::

  The artifact ID should be replaced with ``myapp-container-web`` to specify the directory and command.


.. _firstStepBuildContainerWebDockerImage:

Create a container image
----------------------------------

The blank project has a plugin named `Jib <https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin>`_ (External sites) built in to create an image of a Docker container.

The ``jib: dockerBuild`` goal of this plugin can be executed to create a container image.

.. code-block:: text

  cd myapp-container-web
  mvn package jib:dockerBuild


If the execution is successful, the log given below will be output to the console.

.. code-block:: text

  (omission)
  [INFO] Built image to Docker daemon as myapp-container-web, myapp-container-web, myapp-container-web:0.1.0
  (omission)
  [INFO] Executing tasks:
  [INFO] [==============================] 100.0% complete
  [INFO]
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD SUCCESS
  [INFO] ------------------------------------------------------------------------
  (Omitted)

Built Docker images are stored in a local repository.
Can see the images stored in the local repository with the following command.

.. code-block:: text

  docker image ls
  REPOSITORY              TAG         IMAGE ID       CREATED        SIZE
  myapp-container-web     0.1.0       dd60cbdc7722   50 years ago   449MB
  myapp-container-web     latest      dd60cbdc7722   50 years ago   449MB

Can see that there are 2 images registered: ``myapp-container-web:0.1.0`` and ``myapp-container-web:latest`` .

As you can see, the blank project is configured to create the following two images by executing ``jib:dockerBuild``.

* ``${project.artifactId}:latest``
* ``${project.artifactId}:${project.version}``

`Tomcat image <https://hub.docker.com/_/tomcat>`_ (External sites) is used as base image by default.

The base image can be changed with the ``jib.from.image`` property.
For example, if you want to use ``tomcat:10.1.28-jre17-temurin-jammy`` for your base image, you would write it in ``pom.xml`` .

.. code-block:: xml

  <project>
    <! -- Omitted ...-->
    <properties>
      <! -- Omitted ...-->
      <jib.from.image>tomcat:10.1.28-jre17-temurin-jammy</jib.from.image>
      <! -- Omitted ...-->
    </properties>
    <! -- Omitted ...-->
  </project>

.. tip::

  In the blank project, the base image is specified with a Docker image tag. In this case, the latest version of the specified image will be selected.
  If a different version is selected than at the time of verification, it may affect the operation of the application.
  Therefore, it is recommended to specify the base image as a digest in order to specify exactly which version, after the test is completed.


  An example of setting by digest is shown below.

 .. code-block:: xml

    <jib.from.image>tomcat@sha256:28fde3a9cf9ff62b250cd2ce5b8981a75eedbe6a37a9954c8432f6f52483cfb8</jib.from.image>

.. _firstStepRunContainerWebDockerImage:

Run a container image
----------------------------------

Once you have created a container image, you can run it with the following command.

.. code-block:: text

  cd myapp-container-web
  docker run -d -p 8080:8080 -v %CD%\h2:/usr/local/tomcat/h2 --name myapp-container-web myapp-container-web

Once the container is up and running, you can check the application in your web browser by accessing ``http://localhost:8080/`` .

.. tip::

  The above command is an example of the case where SAMPLE.h2.db, which is included in the blank project beforehand, is used as the database.
  If you do not use SAMPLE.h2.db, you do not need to specify a volume (``-v``).

.. tip::

  Running Docker assumes that you are using Docker Desktop (see :ref:`Prerequisite <firstStepPreamble>`).
  If you are using the Docker Toolbox, the volume specification in the above example will fail.

  If you are using the Docker Toolbox, Docker is running in a VM on VirtualBox.
  Therefore, the path that can be specified on the host side of the volume is the path on the VM.

  On Windows, by default ``C:\Users`` is mounted in ``/c/users`` on the VM.
  Thus, if you are using the Docker Toolbox, you must specify the volume as ``-v/c/users/path/to/project/h2:/usr/local/tomcat/h2`` .

To exit the container, execute the following command.

.. code-block:: text

  docker stop myapp-container-web

To delete a container, execute the following command.

.. code-block:: text

  docker rm myapp-container-web


Configure the database
----------------------------------------

The blank project is initially configured to use the H2 Database Engine. To change the RDBMS to be used, refer to :ref:`customize-db` for the configuration.

In addition, to generate and execute DDL from ER diagrams and automatically generate entity classes, you need to initialize and run gsp-dba-maven-plugin. For details, see :ref:`gsp-maven-plugin`.


Supplementary notes
--------------------

For information on the method of confirming the data of H2 and tools included in the blank project, see :doc:`../firstStep_appendix/firststep_complement`.
