----------------------------------------------------------
Initial setup of web project for container
----------------------------------------------------------

The initial setup of the web project for containers includes:.

* Generating web projects for containers
* Confirmation of operation of web project for container
* Create a container image
* Run Container Image


Overview of Generated Projects
----------------------------------------------------------

The outline of the project generated by this procedure is as follows.

.. list-table::
  :header-rows: 1
  :class: white-space-normal
  :widths: 8,20

  * - Item
    - Description
  * - Project Type
    - Maven project
  * - Project Configuration
    - Single Project Configuration
  * - Used DB
    - H2Databaes Engine (Embedded in application)
  * - Embedded adapters
    - Routing adapter (For more information, see :ref:`router_adaptor` )
  * - What is included in the project to be generated
    - Projects generated include:.
       
      * Basic Configuration for Nablarch Web Applications
      * Web application for communication confirmation
      * Default settings for tools that work with Maven (incorporated by referencing :ref:`about_maven_parent_module` ).


See :doc:`../MavenModuleStructures/index` for relationships to other projects and directory structure.


.. _firstStepGenerateContainerWebBlankProject:

blank project creation
----------------------------------------------------------

Create a blank project using archetypes provided by Nablarch.

Running the mvn Command
~~~~~~~~~~~~~~~~~~~~~~~

Generate a blank project using the `Maven Archetype Plugin (External sites, English) <https://maven.apache.org/archetype/maven-archetype-plugin/usage.html>`_ .

Change the current directory to the directory where you want to create the blank project (Can be in any directory) and place the following files:.

:download:`Batch File <bat/generateContainerWebProject.bat>`

After deployment, specify the parameters required for the arguments and execute the bat file.

generateContainerWebProject.bat |nablarch_version| <<groupId>> <<artifactId>> <<version>> <<package(Any)>>

The parameters to be set in the above command are as follows.
If you want to change the version of nablarch, change |nablarch_version| .

=========== ========================================= =======================
Entry       Description                               Configuration Example
=========== ========================================= =======================
groupId      Group ID (Normally enter package name)   ``com.example``
artifactId   Artifact ID                              ``myapp-container-web``
version      Version number                           ``0.1.0``
package      Package (Usually same as group ID)       ``com.example``
=========== ========================================= =======================

.. important::
   The items groupId and package are mapped to Java package names.
   Therefore, use lowercase letters, numbers, dots, and no hyphens for these inputs.

If the command succeeds, a blank project is created under the current directory.


.. _firstStepContainerWebStartupTest:

communication confirmation
-------------------------------------------

The mechanism and procedure for checking communication is the same as for a normal web project, so refer to :ref: `Web project initial setup procedure <firstStepWebStartupTest>` .

.. note::

  If the artifact ID is ``myapp-container-web`` , specify the directory or command accordingly.


.. _firstStepBuildContainerWebDockerImage:

Create a container image
----------------------------------

Blank projects come pre-loaded with a plug-in called `Jib <https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin>`_ (External sites, English) to create images of Docker containers.

The ``jib: dockerBuild`` goal of this plug-in can be executed to create a container image.

.. code-block:: text

  cd myapp-container-web
  mvn package jib:dockerBuild


Upon successful execution, a log similar to the following is output to the console:.

.. code-block:: text

  (omission)
  [INFO] Built image to Docker daemon as myapp-container-web, myapp-container-web, myapp-container-web:0.1.0
  [INFO] Executing tasks:
  [INFO] [==============================] 100.0% complete
  [INFO]
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD SUCCESS
  [INFO] ------------------------------------------------------------------------
  (Omitted)

Built Docker images are stored in a local repository.
You can check the images stored in your local repository with the following command:.

.. code-block:: text

  docker image ls
  REPOSITORY              TAG         IMAGE ID       CREATED        SIZE
  myapp-container-web     0.1.0       dd60cbdc7722   50 years ago   449MB
  myapp-container-web     latest      dd60cbdc7722   50 years ago   449MB

You can see that there are 2 images registered: ``myapp-container-web:0.1.0`` and ``myapp-container-web:latest`` .

Thus, ``jib:dockerBuild`` on a blank project is set to create two images:.

* ``${project.artifactId}:latest``
* ``${project.artifactId}:${project.version}``

`Tomcat image <https://hub.docker.com/_/tomcat>`_ (External sites, English) is used as base image by default.

The base image is specified in ``pom.xml`` in ``nablarch-archetype-parent`` but can be changed with the ``jib.from.image`` property.
For example, if you want to use ``tomcat:9.0.31-jdk11-adoptopenjdk-hotspot`` for your base image, you would write it in ``pom.xml`` .

.. code-block:: xml

  <project>
    <! -- Omitted ...-->
    <properties>
      <! -- Omitted ...-->
      <!-- tomcat:9.0.31-jdk11-adoptopenjdk-hotspot -->
      <jib.from.image>tomcat@sha256:e1f3ec646689c558bdd1a8b7045c5eed7c0ca9dbe664a82ba47d1591e3c5faf0</jib.from.image>
    </properties>
    <! -- Omitted ...-->
  </project>

.. tip::

  Docker image tags are not immutable and may be updated.
  Therefore, it is recommended to use a digest to specify the base image.

.. _firstStepRunContainerWebDockerImage:

Run a container image
----------------------------------

Once you have created a container image, you can run it with the following command:.

.. code-block:: text

  cd myapp-container-web
  docker run -d -p 8080:8080 -v %CD%\h2:/usr/local/tomcat/h2 --name myapp-container-web myapp-container-web

Once the container is up and running, you can check the application in your web browser by accessing ``http://localhost:8080/`` .

.. tip::

  The above command is an example of the case where SAMPLE.h2.db, which is included in the blank project beforehand, is used as the database.
  If you do not use SAMPLE.h2.db, you do not need to specify a volume (``-v``).

.. tip::

  Running Docker assumes you are using Docker Desktop :ref:`Prerequisite <firstStepPreamble>` .
  If you are using the Docker Toolbox, the volume specification in the above example will fail.

  If you are using the Docker Toolbox, Docker is running in a VM on VirtualBox.
  Therefore, the path that can be specified on the host side of the volume is the path on the VM.

  On Windows, by default ``C:\Users`` is mounted in ``/c/users`` on the VM.
  Thus, if you are using the Docker Toolbox, you must specify the volume as ``-v/c/users/path/to/project/h2:/usr/local/tomcat/h2`` .

To exit the container, execute the following command:.

.. code-block:: text

  docker stop myapp-container-web

To delete a container, execute the following command:.

.. code-block:: text

  docker rm myapp-container-web


Supplement
--------------------

See :doc:`../firstStep_appendix/firststep_complement` for information on how to check H2 data and the tools included in the blank project.
