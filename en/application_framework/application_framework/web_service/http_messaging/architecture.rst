Architecture Overview
==============================
HTTP messaging provides a function to build a web service that processes http messages sent from outside (such as a browser or an external system).

.. important::

  Use of :ref:`RESTful web service <restful_web_service>`  instead of this function is recommended. 
  For more information, see :ref:`reason why RESTful web service is recommended <web_service-recommended_jaxrs>` .

Structure of HTTP messaging
--------------------------------------------------
It has the same structure as the Nablarch web application. 
For more information, see :ref:`web_application-structure`.

Process flow of HTTP messaging
--------------------------------------------------
The process flow of HTTP messaging, from processing a request to returning a response, is shown below.

.. image:: images/http_messaging_flow.png
  :scale: 75

1. :ref:`WebFrontController <web_front_controller>` (implementation class of `javax.servlet.Filter`) receives a request.
2. :ref:`WebFrontController <web_front_controller>` delegates the process for the request to a handler queue (handler queue).
3. `DispatchHandler` configured in the handler queue specifies the action class to be processed based on the URI and adds it to the end of the handler queue.
4. The action class executes business logic using a form class and an entity class. |br|
   For more information on each class, see  :ref:`http_messaging-design` .

5. The action class creates and returns a `ResponseMessage` indicating the process result.
6. :ref:`http_messaging_response_building_handler` in the handler queue is converted into a response (such as json or xml) that is returned to the client, which is returned to the client.

Handlers used in HTTP messaging
--------------------------------------------------
Nablarch provides several handlers as standard, which are required to build web services using HTTP messaging. 
Build the handler queue in accordance with the requirements of the project (a custom handler will have to be created for the project depending on the requirements)

For details of each handler, refer to the link.

Handlers that convert request and response
  * :ref:`http_response_handler`
  * :ref:`http_messaging_request_parsing_handler`
  * :ref:`http_messaging_response_building_handler`
  * :ref:`message_resend_handler`

Handler for filtering requests
  * :ref:`service_availability`
  * :ref:`permission_check_handler`

Handlers associated with database
  * :ref:`database_connection_management_handler`
  * :ref:`transaction_management_handler`

Error handling handler
  * :ref:`global_error_handler`
  * :ref:`http_messaging_error_handler`

Other handlers
  * :ref:`http_request_java_package_mapping`
  * :ref:`thread_context_handler`
  * :ref:`thread_context_clear_handler`
  * :ref:`http_access_log_handler`

Minimum handler configuration for HTTP messaging
--------------------------------------------------
When building web services using HTTP messaging, the minimum required handler queue is as below: 
With this as the base, add standard handlers of Nablarch or custom handlers created in the project according to the project requirements.

.. list-table:: Minimum handler configuration
  :header-rows: 1
  :class: white-space-normal
  :widths: 4,24,24,24,24

  * - No.
    - Handler
    - Request process
    - Response process
    - Exception handling
 
  * - 1
    - :ref:`thread_context_clear_handler`
    -
    - Deletes all the values configured on the thread local by the :ref:`thread_context_handler` .
    -
    
  * - 2
    - :ref:`global_error_handler`
    -
    -
    - Outputs the log for a runtime exception or error.

  * - 3
    - :ref:`http_response_handler`
    -
    - Performs any one of servlet forward, redirect, or response writing.
    - Displays the default error page in the case of a runtime exception or error.

  * - 4
    - :ref:`thread_context_handler`
    - Initializes thread context variables such as request ID from the request information.
    - 
    -

  * - 5
    - :ref:`http_messaging_error_handler`
    - 
    - If the response body generated by the subsequent handler is empty, the default body corresponding to the status code is configured.
    - Log output and response according to the exception is generated.

  * - 6
    - :ref:`request_path_java_package_mapping`
    - Identifies the business action to be processed from the request path and adds it to the end of the handler queue.
    - 
    - 

  * - 7
    - :ref:`http_messaging_request_parsing_handler`
    - Parses the body of the http request, creates :java:extdoc:`RequestMessage <nablarch.fw.messaging.RequestMessage>` , 
      and passes it to the subsequent handler as a request object.
    - 
    - 

  * - 8
    - :ref:`database_connection_management_handler`
    - Acquires DB connection.
    - Releases the DB connection.
    -

  * - 9
    - :ref:`http_messaging_response_building_handler`
    - 
    - 
    - Generates HTTP response for an error based on the message for the error generated by the business action.

  * - 10
    - :ref:`transaction_management_handler`
    - Begin a transaction.
    - Commits the transaction.
    - Rolls back a transaction.

  * - 11
    - :ref:`http_messaging_response_building_handler`
    - 
    - Generates a response for HTTP based on the message generated by the business action.
    - Generates HTTP response for an error based on the exception thrown by the subsequent handler.

Action used in HTTP messaging
---------------------------------------------------------------------------------
Nablarch provides action classes as standard, which are required for building HTTP messaging. 
Click on the link for more information.

* :java:extdoc:`MessagingAction (Template class for actions for synchronous response messaging)<nablarch.fw.messaging.action.MessagingAction>`

.. |br| raw:: html

  <br />
