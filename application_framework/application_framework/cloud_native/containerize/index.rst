.. _docker_container:

Dockerコンテナ化
=========================

.. contents:: 目次
  :depth: 2
  :local:

本章では、Nablarchで作ったアプリケーションを、クラウドネイティブを意識した形でDockerコンテナイメージにする方法について説明する。

まず、コンテナ化するためには従来のNablarchアプリケーションに対して、どのような修正を入れなければならないのかについて説明する。
そして、あらかじめコンテナ化のための設定を組み込んだブランクプロジェクトを作成する、専用のアーキタイプについて説明する。

.. _requirement_for_cloud_native:

クラウド環境に適したシステムに必要なこと
--------------------------------------------------------------------------------------------------

クラウドネイティブ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**クラウドネイティブ** とは、はじめからAWSなどのクラウド環境で動かすことを前提とし、クラウド環境に最適化して開発されたシステムのことを指す。

クラウド環境に適したシステムには、オンプレミス環境で動かすような従来のシステムとは異なる設計が必要となる。
例えば、スケーラビリティを持たせるためにアプリケーションが状態を持たないようにするといった対応が必要になる。


The Twelve-Factor App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`The Twelve-Factor App`_ (外部サイト)とは、 `Heroku <https://jp.heroku.com/>`_ (外部サイト、英語)のエンジニアが提唱したシステム開発の方法論で、クラウド環境に適したシステムを開発するときに考慮すべきことを12の要素（Twelve-Factor）にまとめたものになる。

本章で説明するコンテナ化のために必要となるNablarchアプリケーションの修正内容は、この `The Twelve-Factor App`_ (外部サイト)で説明されている方法をもとにしている。

.. _modify_nablarch_app_for_cloud_native:

Nablarchアプリケーションに必要な修正
--------------------------------------------------------------------------------------------------

:ref:`標準のウェブアプリケーションのブランクプロジェクト <firstStepGenerateWebBlankProject>` を使ってNablarchアプリケーションを構築した場合、以下の点が `The Twelve-Factor App`_ (外部サイト)に反した状態になっている。

ステートレス
  `VI. プロセス <https://12factor.net/ja/processes>`_ (外部サイト)では、アプリケーションはステートレスでなければならないとされている。
  つまり、個々のアプリケーションは状態を保持してはいけない、ということになる。

  標準のブランクプロジェクトでは、HTTPセッションを使った状態管理が有効となっているため、この方針に反している。

  Nablarchアプリケーションをステートレスにするための設定については、 :ref:`stateless_web_app` を参照。

ログ出力
  `XI. ログ <https://12factor.net/ja/logs>`_ (外部サイト)では、アプリケーションのログはすべて標準出力に書き出し、ファイルには出力すべきでないとされている。

  標準のブランクプロジェクトでは、ロガーの出力先にファイルが指定されているため、この方針に反している。

  Nablarchのログ出力設定については、 :ref:`log-basic_setting` を参照。

環境変数を使った設定
  `III. 設定 <https://12factor.net/ja/config>`_ (外部サイト)では、環境ごとによって切り替える設定（連携する他サービスとの接続設定など）は、アプリケーション内部に持たずに環境変数から設定すべきとしている。

  標準のブランクプロジェクトでは、開発環境と本番環境の設定の違いをMavenのプロファイルを使って切り替えているため、この方針に反している。

  環境変数を使って環境依存値を上書きする方法については、 :ref:`repository-overwrite_environment_configuration_by_os_env_var` を参照。


.. _nablarch_container_archetype:

コンテナ用のアーキタイプ
--------------------------------------------------------------------------------------------------

Nablarchでは、Dockerコンテナ上で動かすことを前提としたウェブアプリケーションのアーキタイプを用意している。

このアーキタイプを使って生成されるブランクプロジェクトには、 :ref:`modify_nablarch_app_for_cloud_native` で説明した修正があらかじめ適用されている。
また、 `Jib`_ (外部サイト、英語)というDockerコンテナを簡単に生成するためのMavenプラグインが組み込まれているため、開発者はすぐにDockerコンテナ用のNablarchアプリケーションの開発を始めることができる。

.. tip::
  
  Jibを使用すると、Dockerfileを書かなくてもコンテナイメージを作成できる。

  DockerfileはDockerのコンテナイメージを作成するための、最も基本的な命令を記述できる。
  このため、Dockerfileを使用すれば自由な形でコンテナイメージを作成できる。
  しかし一方で、Dockerfileを使用することには次のようなデメリットもある。

  * 基本的な命令で記述するため、内容が複雑になりやすい
  * コンテナイメージのレイヤ構造など、ベストプラクティスを意識した記述が必要で高い知識が要求される

  JibはJavaアプリケーションのDockerコンテナイメージを作成することに特化したツールとなっている。
  設定の記述はJavaアプリケーション向けに抽象化され、特別な設定をしなくてもベストプラクティスを考慮した形でコンテナイメージを作成できるようになっている。

  以上の理由により、Nablarchのコンテナ用アーキタイプは、Dockerfileを直接記述するのではなくJibを使用してコンテナイメージを作成する方式を採用している。


Dockerコンテナ用のアーキタイプの説明については以下を参照。

* :ref:`前提条件 <firstStepPreamble>`
* :ref:`プロジェクトの構成 <container_web_project_summary>`
* :ref:`環境ごとの設定の切り替えについて <container_production_config>`
* :ref:`初期セットアップ手順 <first_step_container>`

.. _The Twelve-Factor App: https://12factor.net/ja/
.. _Jib: https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin
