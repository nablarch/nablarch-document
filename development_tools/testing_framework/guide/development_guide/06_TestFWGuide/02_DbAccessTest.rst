====================================
データベースを使用するクラスのテスト
====================================

----
概要
----

データベースアクセスクラスなど、データベースを使用するクラスをテストする方法を記載する。


データベースを使用するクラスをテストする場合、本フレームワークで用意されたクラスを使用することでデータベースに関する操作（テストデータ投入、データ確認）を行うことができる。



全体像
======

.. image:: _images/class_structure.png
   :scale: 100


主なクラス, リソース
--------------------


+---------------------------+-----------------------------------------------+--------------------------------+
|名称                       |役割                                           | 作成単位                       |
+===========================+===============================================+================================+
|テストクラス               |テストロジックを実装する。\                    |テスト対象クラスにつき１つ作成  |
|                           |DbAccessTestSupportを継承すること。            |                                |
+---------------------------+-----------------------------------------------+--------------------------------+
|テストデータ（Excelファイル|テーブルに格納する準備データや期待する結果\    |テストクラスにつき１つ作成      |
|）                         |など、テストデータを記載する。                 |                                |
+---------------------------+-----------------------------------------------+--------------------------------+
|テスト対象クラス           |テストされるクラス。                           | \－                            |
+---------------------------+-----------------------------------------------+--------------------------------+
|DbAccessTestSupport        |準備データ投入などデータベースを使用するテスト\| \－                            |
|                           |に必要な機能を提供する。また、テスト実行前後に\|                                |
|                           |データベーストランザクションの開始・終了処理を\|                                |
|                           |行う（ :ref:`using_transactions` ）。          |                                |
+---------------------------+-----------------------------------------------+--------------------------------+


------------------
基本的なテスト方法
------------------


目的に応じた、本フレームワークのAPIの使用方法を以下に記載する。


参照系のテスト
==============

参照系のテストにおいて、テスト対象クラスが期待通りにデータを取得していることを確認する場合、以下の手順でデータベースからの参照結果を確認できる。

 #. データベースに準備データを登録する。
 #. テスト対象クラスのメソッドを起動する。
 #. 戻り値として受け取った検索結果が期待した値であるか確認する。


シーケンス
----------

.. image:: _images/select_sequence.png
   :scale: 100


テストソースコード実装例
------------------------

 .. code-block:: java 

    public class DbAccessTestSample extends DbAccessTestSupport {

        /**
         * 全件検索のテスト。<br/>
         * 従業員テーブルに登録されたレコードを
         * 全件取得できることを確認する。
         */ 
        @Test
        public void testSelectAll() {

            // データベースに準備データを登録する。
            //引数にはシート名を記載する。
            setUpDb("testSelectAll");
                        
            // テスト対象メソッドを起動する。
            EmployeeDbAcess target = new EmployeeDbAccess(); 
            SqlResultSet actual = target.selectAll();
            
            // 結果確認
            // Excelに記載した期待値と実際の値が等しいことを確認する
            // 引数には期待値を格納したシート名, 期待値のID, 実際の値を指定
            assertSqlResultSetEquals("testSelectAll", "expected", actual);
        }
    }


テストデータ記述例
------------------

.. _how_to_write_setup_table:

データベースに事前登録する準備データ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


以下のようにデータを記載する。

* 1行目　：　SETUP_TABLE=<登録対象のテーブル名>

* 2行目　：　そのテーブルのカラム名

* 3行目～　：　登録するレコード（2行目のカラム名と対応）



SETUP_TABLE=EMPLOYEE

=========== ============ ===========
ID          EMP_NAME     DEPT_CODE 
=========== ============ ===========
      00001  山田太郎          0001 
      00002  田中一郎          0002 
=========== ============ ===========

SETUP_TABLE=DEPT

============ =================
         ID  DEPT_NAME       
============ =================
       0001  人事部          
       0002  総務部          
============ =================




テスト実行後に期待する値
~~~~~~~~~~~~~~~~~~~~~~~~


以下のようにデータを記載する。

* 1行目　：　LIST_MAP=<シート内で一意になる期待値のID(任意の文字列)>

* 2行目　：　SELECT文で指定したカラム名または別名

* 3行目～　：　検索結果（2行目のカラム名と対応）



LIST_MAP=expected

=========== ============ ===========
ID          EMP_NAME     DEPT_NAME
=========== ============ ===========
      00001  山田太郎      人事部
      00002  田中一郎      総務部
=========== ============ ===========

.. _how_to_test_update_method:

更新系のテスト
==============

テスト対象クラスが期待通りにデータを更新していることを確認する場合、以下の手順でデータベースの更新結果を確認できる。


 #. データベースに準備データを登録する。
 #. テスト対象クラスのメソッドを起動する。
 #. トランザクションをコミットする。
 #. データベースの値が期待通り更新されていることを確認する。

.. important::
  Nablarch Application Frameworkでは複数種類のトランザクションを併用することが前提となっている。
  そのため、テスト対象クラス実行後にデータベースの内容を確認する際には、
  トランザクションをコミットしなければならない。トランザクションをコミットしない場合、
  テスト結果の確認が正常に行われない。

.. tip::
  参照系のテストの場合はコミットを行う必要はない。


シーケンス
----------

.. image:: _images/update_sequence.png
   :scale: 100


テストソースコード実装例
------------------------

 .. code-block:: java

    public class DbAccessTestSample extends DbAccsessTestSupport {
        @Test
        public void testDeleteExpired() {

            // データベースに準備データを登録する。
            // 引数にはシート名を記載する。
            setUpDb("testDeleteExpired");
                        
            // テスト対象メソッドを起動する。
            EmployeeDbAcess target = new EmployeeDbAccess(); 
            SqlResultSet actual = target.deleteExpired();  // 期限切れデータを削除
            
            // トランザクションをコミット
            commitTransactions();

            // 結果確認
            // Excelに記載した期待値と実際の値が等しいことを確認する
            // 引数には期待値を格納したシート名, 実際の値を指定
            assertTableEquals("testDeleteExpired", actual);
        }


テストデータ記述例
------------------

データベースに事前登録する準備データ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


以下のようにデータを記載する。

* 1行目　：　SETUP_TABLE=<登録対象のテーブル名>

* 2行目　：　そのテーブルのカラム名

* 3行目～　：　登録するレコード（2行目のカラム名と対応）


SETUP_TABLE=EMPLOYEE

=========== ============ =============
ID          EMP_NAME      EXPIRED
=========== ============ =============
      00001  山田太郎      TRUE
      00002  田中一郎      FALSE
=========== ============ =============


テスト実行後に期待する値
~~~~~~~~~~~~~~~~~~~~~~~~


以下のようにデータを記載する。

* 1行目　：　EXPECTED_TABLE=<確認対象のテーブル名>

* 2行目　：　確認対象テーブルのカラム名

* 3行目～　：　期待する値

EXPECTED_TABLE=EMPLOYEE

=========== ============ =============
ID          EMP_NAME      EXPIRED
=========== ============ =============
 // CHAR(5)  VARCHAR(64)   BOOLEAN  
      00002  田中一郎      FALSE
=========== ============ =============


--------------------------------------
データベーステストデータの省略記述方法
--------------------------------------

データベースの準備データおよび期待値を記述する際、\
テストに関係の無いカラムについては記述を省略できる。
省略したカラムには、自動テストフレームワークにより\ :ref:`default_values_when_column_omitted`\ が設定される。
この機能を利用することにより、テストデータの可読性が向上する。\
また、テーブル定義が変更された場合でも、関係無いカラムであればテストデータ修正作業は発生しなくなる為、\
保守性が向上する。

この機能は特に更新系テストケースに有効である。多くのカラムのうち１カラムだけが更新される場合、\
不要なカラムを記述する必要がなくなる。

.. important::
 データベース\ **検索結果**\ の期待値を記述する際は、\
 検索対象カラム全てを記述しなければならない\
 （レコードの主キーだけを確認する、というような確認方法は不可）。
 
 また、\ **登録系**\ テストの場合も、新規に登録されたレコードの全カラムを確認する必要があるので、\
 本機能を用いてカラムを省略することはできない。


DBに準備データのカラムを省略する場合
====================================

データベース準備データを記述する際にカラムを省略すると、省略されたカラムには\
\ :ref:`default_values_when_column_omitted`\ が設定されているものとして扱われる。

ただし、\ **主キーカラムを省略することはできない**\ 。


DB期待値のカラムを省略する場合
==============================

DB期待値から単純に無関係なカラムを省略すると、省略されたカラムは比較対象外となる。\
更新系テストの場合には、「無関係なカラムが更新されていないことを確認する」という観点も必要である。
この場合、データタイプに\ `EXPECTED_TABLE`\ ではなく、\ `EXPECTED_COMPLETE_TABLE`\ を使用する。
\ `EXPECTED_TABLE`\ を使用した場合、省略されたカラムは比較対象外となるが、\
`EXPECTED_COMPLETE_TABLE`\ を使用した場合は、省略されたカラムには\
:ref:`デフォルト値<default_values_when_column_omitted>`\ が格納されているものとして\
比較が行われる。


具体例
======

全カラムを記載した場合と、関係のあるカラムのみを記載した場合の記述例を以下に示す。

テストケース例
--------------

以下のテストケースを例として使用する。


**「有効期限」を過ぎたレコードは「削除フラグ」が1に更新されること。**\ [#]_

.. [#] 本テスト実施時の日付は2011/01/01とする。

使用するテーブル（SAMPLE_TABLE）には、以下のカラムがあるものとする。

=========== ==================================================
 カラム名    説明                                         
=========== ==================================================
 PK1         主キー                                      
 PK2         主キー                                      
 COL_A       テスト対象の機能では使用しないカラム        
 COL_B       テスト対象の機能では使用しないカラム        
 COL_C       テスト対象の機能では使用しないカラム        
 COL_D       テスト対象の機能では使用しないカラム        
 有効期限    有効期限を過ぎたデータが処理対象となる            
 削除フラグ  有効期限を過ぎたレコードの値を'1'に変更する 
=========== ==================================================


省略せずに全カラムを記載した場合（悪い例）
------------------------------------------

全カラムが記載されており可読性に劣る\ [#]_\ 。
また、テーブル定義に変更があった場合、無関係なカラムであっても修正しなければならない。

.. [#] カラムCOL_A, COL_B, COL_C, COL_Dは本テストケースに無関係である。

**準備データ**

SETUP_TABLE=SAMPLE_TABLE

+-----+-----+-----+-----+-----+-----+--------+----------+
|PK_1 |PK_2 |COL_A|COL_B|COL_C|COL_D|有効期限|削除フラグ|
+=====+=====+=====+=====+=====+=====+========+==========+
| 01  |0001 |1a   |1b   |1c   |1d   |20101231|0         |
+-----+-----+-----+-----+-----+-----+--------+----------+
| 02  |0002 |2a   |2b   |2c   |2d   |20110101|0         |
+-----+-----+-----+-----+-----+-----+--------+----------+



**期待値**

EXPECTED_TABLE=SAMPLE_TABLE

+-----+-----+-----+-----+-----+-----+--------+----------+
|PK_1 |PK_2 |COL_A|COL_B|COL_C|COL_D|有効期限|削除フラグ|
+=====+=====+=====+=====+=====+=====+========+==========+
| 01  |0001 |1a   |1b   |1c   |1d   |20101231|1         |
+-----+-----+-----+-----+-----+-----+--------+----------+
| 02  |0002 |2a   |2b   |2c   |2d   |20110101|0         |
+-----+-----+-----+-----+-----+-----+--------+----------+



関係のあるカラムのみを記載した場合（良い例）
--------------------------------------------

関係のあるカラムのみを記載することで可読性、保守性が向上する。
このテストケースに関係のあるカラムは以下のとおり。

* レコードを一意に特定する為の主キーカラム(PK_1,PK_2)
* 更新対象レコードを抽出する条件となる「有効期限」カラム
* 更新対象となる「削除フラグ」カラム

また、テーブル定義に変更があった場合でも、無関係なカラムであれば影響を受けない。


**準備データ**

実行テストに関係あるカラムのみを記述している。

SETUP_TABLE=SAMPLE_TABLE

+-----+-----+--------+----------+
|PK_1 |PK_2 |有効期限|削除フラグ|
+=====+=====+========+==========+
| 01  |0001 |20101231|0         |
+-----+-----+--------+----------+
| 02  |0002 |20110101|0         |
+-----+-----+--------+----------+



**期待値**

期待値を記述する際、\ `EXPECTED_TABLE`\ の代わりに\ `EXPECTED_COMPLETE_TABLE`\ を使用する。

EXPECTED_COMPLETE_TABLE=SAMPLE_TABLE

+-----+-----+--------+----------+
|PK_1 |PK_2 |有効期限|削除フラグ|
+=====+=====+========+==========+
| 01  |0001 |20101231|1         |
+-----+-----+--------+----------+
| 02  |0002 |20110101|0         |
+-----+-----+--------+----------+



.. _`default_values_when_column_omitted`:

デフォルト値
============

自動テストフレームワークのコンポーネント設定ファイルにて明示的に指定していない場合、\
デフォルト値には以下の値が使用される。

+-----------+----------------------+
|  カラム   |デフォルト値          |
+===========+======================+
|  数値型   |0                     |
+-----------+----------------------+
| 文字列型  |半角スペース          |
+-----------+----------------------+
|  日付型   |1970-01-01 00:00:00.0 |
+-----------+----------------------+


デフォルト値の変更方法
======================


設定項目一覧
------------

nablarch.test.core.db.BasicDefaultValuesクラスを使用し、
以下の値をコンポーネント設定ファイルで設定できる。

+-------------+--------------------------+----------------------------------------------------------------------+
| 設定項目名  |説明                      |設定値                                                                |
+=============+==========================+======================================================================+
| charValue   |文字列型のデフォルト値    |1文字のASCII文字                                                      |
+-------------+--------------------------+----------------------------------------------------------------------+
| numberValue |数値型のデフォルト値      |0または正の整数                                                       |
+-------------+--------------------------+----------------------------------------------------------------------+
| dateValue   |日付型のデフォルト値      |JDBCタイムスタンプエスケープ形式 (yyyy-mm-dd hh:mm:ss.fffffffff)      |
+-------------+--------------------------+----------------------------------------------------------------------+

コンポーネント設定ファイルの記述例
-------------------------------------------

以下の設定値を使用する場合のコンポーネント設定ファイル記述例を示す。

+-------------+------------------------------+
| 設定項目名  |設定値                        |
+=============+==============================+
| charValue   | a                            |
+-------------+------------------------------+
| numberValue | 1                            |
+-------------+------------------------------+
| dateValue   | 2000-01-01 12:34:56.123456789|
+-------------+------------------------------+


.. code-block:: xml

  <!-- TestDataParser -->
  <component name="testDataParser" class="nablarch.test.core.reader.BasicTestDataParser">
    <!-- データベースデフォルト値 -->
    <property name="defaultValues">
      <component class="nablarch.test.core.db.BasicDefaultValues">
        <property name="charValue" value="a"/>
        <property name="dateValue" value="2000-01-01 12:34:56.123456789"/>
        <property name="numberValue" value="1"/>
      </component>
    </property>
    <!-- 中略 -->
  </component>


------
注意点
------


setUpDbメソッドに関する注意点
=============================

  * Excelファイルには必ずしも全カラムを記述する必要はない。
    省略されたカラムには、デフォルト値が設定される。

  * Excelファイルの１シート内に複数のテーブルを記述できる。
    setUpDb(String sheetName)実行時、指定されたシート内のデータタイプ"SETUP_TABLE"全てが登録対象となる。

 

assertTableEqualsメソッドに関する注意点
=======================================

  * 期待値の記述で省略されたカラムは、比較対象外となる。

  * 比較実行時、レコードの順番が異なっていても主キーを突合して正しく比較ができる。
    レコードの順序を意識して期待データを作成する必要はない。

  * １シート内に複数のテーブルを記述できる。assertTableEquals(String sheetName)実行時、指定されたシート内のデータタイプ"EXPECTED_TABLE"であるデータが全て比較される。

  * 更新日付のようなjava.sql.Timestamp型のフォーマットは"yyyy-mm-dd hh:mm:ss.fffffffff"である(fffffffffはナノ秒)。ナノ秒が設定されていない場合でも、フォーマット上は0ナノ秒として表示される。例えば、2010年1月1日12時34分56秒ジャストの場合、2010-01-01 12:34:56.0となる。Excelシートに期待値を記載する場合は、末尾の小数点＋ゼロを付与しておく必要がある。


assertSqlResultSetEqualsメソッドに関する注意点
==============================================

  * SELECT文で指定された全てのカラム名（別名）が比較対象になる。ある特定のカラムを比較対象外にすることはできない。

  * レコードの順序が異なる場合は、等価でないとみなす（アサート失敗）。
    これは以下の理由による。

    * SELECTで指定されたカラムに主キーが含まれているとは限らない為。
    * SELECT実行時はORDER BY指定がなされる場合がほとんどであり、順序についても厳密に比較する必要がある為。

クラス単体テストにおける登録・更新系テストの注意点
==================================================

 * 自動設定項目を利用してデータベースに登録・更新する際は、ThreadContextにリクエストIDとユーザIDが設定されている必要がある。テスト対象クラス起動前にこれらの値をThreadContextに設定しておくこと。
   ThreadContextの設定方法については、次の項を参照。（  :ref:`using_ThreadContext`  ）

 * デフォルト以外のトランザクションを使用する場合は、本フレームワークにトランザクション制御を行わせる必要がある。トランザクション制御の設定方法については、次の項を参照。（  :ref:`using_transactions`  ）

外部キーが設定されたテーブルにデータをセットアップしたい
=========================================================================
:ref:`master_data_backup` と同じ機能を用いて、テーブルの親子関係を判断しデータの削除及び登録を行う。
詳細は :ref:`MasterDataRestore-fk_key` を参照。

Excelファイルに記述できるカラムのデータ型に関する注意点
=======================================================
Excelファイルには、:java:extdoc:`SqlPStatement <nablarch.core.db.statement.SqlPStatement>` で対応している型のカラムのみ
テストデータとして記述することができる。

そのため、それ以外のデータ型(例えば、OracleのROWIDやPostgreSQLのOIDなど)のカラムはテストデータとして記述できない点に注意すること。
