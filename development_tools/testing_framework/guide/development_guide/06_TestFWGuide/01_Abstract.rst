.. _auto-test-framework:

========================
自動テストフレームワーク
========================

----
特徴
----

JUnit4ベース
============
自動テストフレームワークは、JUnit4をベースとしている。
各種アノテーション、assertメソッドやMatcherクラスなど、JUnit4で提供されている機能を使用する。


テストデータの外部化
====================
テストデータをExcelファイルに記述できる。
データベース準備データや期待するテスト結果などを記載したExcelファイルを
自動テストフレームワークのAPIを通じて使用できる。


Nablarchに特化したテスト補助機能を提供
======================================
トランザクション制御やシステム日付設定など、Nablarchアプリケーションに特化したAPIを用意する。


.. ----
.. 要求
.. ----



.. 実装済み
.. ========

.. * データセットアップ

..   * EXCELにデータベース(テーブル)データの準備データが記述できる。
 

.. * テスト実行機能
   

.. * 判定（アサート機能）

..   * テーブルの更新結果がアサートできる
..   * SELECT文の実行結果(取得結果)がアサートできる
..   * メソッドの戻り値となる値がアサートできる

..     * List<Map<String, String>

..   * セル内のデータについて、空白やnullを明示的に記述できる。



.. 未実装
.. ======
.. * データセットアップ

..   * マスタデータが高速にセットアップできる。

..     * マスタデータ(メッセージ、コードなど、、)の投入。※テストケース毎に変わらないデータは、ダンプ等から高速にロードができる。

..   * データシートから、各テスト環境へデータ投入ができる。
..   * データバックアップ。
..   * バックアップからの復元。
..   * テストデータの記述形式が見やすく記述できる。
..   * テストデータが任意の単位で記述できる。
..   * テストデータが文字コードに依存せずに記述できる。
..   * 自動テストのケース修正・追加が容易にできる。
..   * ターゲットモジュールのリファクタリングを行った際にデータシートに与える影響が最小限であること。
..   * 下記のデータを記述できること

..     * DB データ
..     * ファイル(XML, CSV, 固定長)
..     * メソッドの戻り値となる値（Java のオブジェクト等）
..     * 終了コード、ログ出力メッセージ(JOBLOGも含む)
..     * HTTPリクエスト/レスポンス
..     * その他電文（MQ 等）
..     * バイナリーデータ

..   * EXCELで作成したデータファイルから、ファイル(固定長、CSV、可変長、XML等)を作成し各テスト環境へ配置できる。



.. * テスト実行機能

..   * インプットデータ（バッチの起動パラメータ/ユーザーの入力等）を EXCEL に記述できること。
..   * 準備データをインプットとして自動テストを実行できること。（当然、DB/ファイル共に実行可能。）
..   * スタブを使用して自動テストが実行できる(MQ、暗号化、外部接続、プロダクト依存等)。
..   * 項目精査の自動テストは、テスト毎のデータを用意せずに実行できる。
..   * 同じ自動テストが繰り返し実行できる。
..   * 自動テストを実行する範囲を指定できる。
..   * 自動テスト全実行時に実行順番によって結果が変わらない。
..   * 自動テスト全実行が高速に実行できる。
..   * 準備データシート上から自動テストを実行できる。
..   * 異常系のテスト用に、環境起因で発生するエラーも擬似的に発生させることができる。
..   * OS 等の環境に依存しないでテストを実行できる。
..   * ターゲットモジュールの全てのロジック（メソッド、プロシージャ等）に対してテストが実行できる。
..   * デッドロックや、ロック要求タイムアウトのリトライが透過的に実行できる。

.. * 判定（アサート機能）

..   * XMLファイルがアサートできる。
..   * 画面レイアウトがアサートできる。
..   * 帳票データーがアサートできる。


.. 未検討
.. ======

..   * Excelデータから任意のJavaオブジェクト(例：Entityのリスト、JMSメッセージ…)を生成するロジックを、既存機能に変更を加えずに追加できる。



..   * リンク機能の搭載。例えば、あるセルに"\*LINK1"と書いてあると、"\*LINK1"というIDを持ったデータの中身を取ってこれる。
..   * Excelファイルを、単なる外部ファイルではなく、テスト仕様書として使用することができる。テスト仕様書をもとにテストを駆動できる。
    
..   * JUnitテストコードを書かなくても、Excelファイルを用意するだけでテストを実行できる。


.. 取り下げ
.. ========

.. 現状無し。


.. _`testing_fw_components`:

------------------------------
自動テストフレームワークの構成
------------------------------

.. image:: _images/abstract_structure.png
   :scale: 80


+----------------------------+--------------------------------------+--------------------------------------+
|構成物                      |説明                                  |作成者                                |
+============================+======================================+======================================+
|テストクラス                |テスト処理を記述する。                |アプリケーションプログラマ            |
+----------------------------+--------------------------------------+--------------------------------------+
|テスト対象クラス            |テスト対象となるクラス。              |アプリケーションプログラマ            |
+----------------------------+--------------------------------------+--------------------------------------+
|Excelファイル               |テストデータを記載する。自動テストフレ|アプリケーションプログラマ            |
|                            |ームワークを使用することにより、データ|                                      |
|                            |を読み取ることができる。              |                                      |
+----------------------------+--------------------------------------+--------------------------------------+
|コンポーネント設定ファイル・|テスト実行時の各種設定を記載する。    |アプリケーションプログラマ（個別のテス|
|環境設定ファイル            |                                      |トに固有の設定が必要な場合）          |
+----------------------------+--------------------------------------+--------------------------------------+
|自動テストフレームワーク    |テストに必要な機能を提供する。        | \－                                  |
|                            |                                      |                                      |
+----------------------------+--------------------------------------+--------------------------------------+
|Nablarch Application        |フレームワーク本体（本機能の対象外）  | \－                                  |
|Framework                   |                                      |                                      |
+----------------------------+--------------------------------------+--------------------------------------+



----------------------
テストメソッド記述方法
----------------------

JUnit4のアノテーションを使用する。
テストメソッドに @Test アノテーションを付与する。


 .. code-block:: java 

    public class SampleTest {

        @Test
        public void testSomething() {
            // テスト処理
        }
    }


.. tip::
  @Beforeや@Afterなどのアノテーションも使用できる。これらのアノテーションを用いて、
  テストメソッド前後にリソースの取得解放などの共通処理を行いたい場合は、
  次の項を参照（ :ref:`using_junit_annotation` ）。


.. _`how_to_write_excel`:


---------------------------
Excelによるテストデータ記述
---------------------------

データベースの準備データやデータベース検索結果などのデータを表すには、
Javaソースコードよりスプレッドシートのほうが可読性や編集のしやすさという点で有利である。
Excelファイルを使用することにより、このようなデータをスプレッドシート形式で扱うことができる。

命名規約
========

Excelファイル名、ファイルパスには推奨される規約が存在する。この規約に従うことにより、テストクラスで明示的にディレクトリ名やファイル名を指定してファイルを読み込む必要がなくなり、簡潔にテストソースコードを記述できる。また明示的にパスを指定することで任意の場所のExcelファイルを読み込むことも可能である。


パス、ファイル名に関する規約
----------------------------

ファイル名、パスに関して推奨される規約は以下の通り。

- Excelファイル名は、テストソースコードと同じ名前にする（拡張子のみ異なる）。

- Excelファイルを、テストソースコードと同じディレクトリに配置する。


例を以下に示す。

+--------------------+----------------------+-----------------------------+
|ファイルの種類      |配置ディレクトリ      |ファイル名                   |
+====================+======================+=============================+
|テストソースファイル|<PROJECT_ROOT>/test   |ExampleDbAcessTest.java      |
+--------------------+/jp/co/tis/example/db/+-----------------------------+
|Excelファイル       |                      |ExampleDbAcessTest.xlsx [#]_ |
+--------------------+----------------------+-----------------------------+

.. [#] Excel ファイルは、 Excel2003以前のファイル形式(拡張子 xls の形式)および Excel2007 以降のファイル形式(拡張子 xlsx の形式)に対応している。   

Excelシート名に関する規約
-------------------------

Excelシートについては、以下の規約が推奨される。

- １テストメソッドにつき１シート用意する。

- シート名はテストメソッド名と同名にする。

例を以下に示す。

+--------------------+--------------------------------+
|テストメソッド      |@Test public void testInsert()  |
+--------------------+--------------------------------+
|Excelシート名       |testInsert                      |
+--------------------+--------------------------------+

.. tip::
  シートに関する規約は、「制約」事項ではない。
  テストメソッド名とExcelシート名が同名でなくても正しく動作する。
  今後の機能追加は上記規約をデフォルトとして開発されるので、命名規約に準拠することを推奨する。
  仮に命名規約を変更する場合であってもプロジェクト内で統一を図ること。



シート内の構造
==============

Excelシートの記述方法関する規約について説明を行う。
以下にシートの記述例を記載する。

.. image:: _images/sheet_example.JPG
   :scale: 90 
 


シート内には、データベースに格納するデータやデータベース検索結果など、さまざまな種類のデータを記載できる。テストデータの種類を判別するために「データタイプ」というメタ情報をテストデータに付与する必要がある。「データタイプ」は、そのテストデータが何を表しているかを示す。

現状、以下のデータタイプが用意されている。

================================= ==================================================================  ==========================
データタイプ名                    説明                                                                設定する値                    
================================= ==================================================================  ==========================
SETUP_TABLE                       テスト実行前にデータベースに登録するデータ                          登録対象のテーブル名
EXPECTED_TABLE                    テスト実行後の期待するデータベースのデータ                          確認対象のテーブル名
                                  省略したカラムは、比較対象外となる。
EXPECTED_COMPLETE_TABLE           テスト実行後の期待するデータベースのデータ                          確認対象のテーブル名
                                  省略したカラムには\ :ref:`default_values_when_column_omitted`\                               
                                  が設定されているものとして扱われる。
LIST_MAP                          List<Map<String,String>>形式のデータ                                シート内で一意になるID
                                                                                                      期待値のID(任意の文字列)
SETUP_FIXED                       事前準備用の固定長ファイル                                          準備ファイルの配置場所
EXPECTED_FIXED                    期待値を示す固定長ファイル                                          比較対象ファイルの配置場所
SETUP_VARIABLE                    事前準備用の可変長ファイル                                          準備ファイルの配置場所
EXPECTED_VARIABLE                 期待値を示す可変長ファイル                                          比較対象ファイルの配置場所
MESSAGE                           メッセージング処理のテストで使用するデータ                          固定値 \ [#]_\ 
EXPECTED_REQUEST_HEADER_MESSAGES  要求電文（ヘッダ）の期待値を示す固定長ファイル                      リクエストID
EXPECTED_REQUEST_BODY_MESSAGES    要求電文（本文）の期待値を示す固定長ファイル                        リクエストID
RESPONSE_HEADER_MESSAGES          応答電文（ヘッダ）を示す固定長ファイル                              リクエストID
RESPONSE_BODY_MESSAGES            応答電文（本文）を示す固定長ファイル                                リクエストID
================================= ==================================================================  ==========================

\

.. [#] \ `setUpMessages`\ または\ `expectedMessages`\ 



また、データの個数も複数記述できる。



データの種類に依らない共通の書式は以下の通り。

* データ1行目は「データタイプ=値」の形式で、データタイプと値を記載する。
* 2行目以降の書式はデータタイプにより異なる。

　データタイプとは、そのデータが何を表すかを特定するための情報である。
例えばそのデータが、データベースに投入されるべきデータである場合は、データタイプ"SETUP_TABLE"を使用する。

例えば、以下のようにデータタイプを記載した場合、そのデータがCOMPOSERテーブルに準備データとして登録されるべきものであることを示している。


SETUP_TABLE=COMPOSER

+--------+------------+-----------+
|     NO | FIRST_NAME | LAST_NAME |
+========+============+===========+
|  00001 | Steve      | Reich     |
+--------+------------+-----------+
|  00002 | Phillip    | Glass     |
+--------+------------+-----------+



コメント
========

セル内に"//"から開始する文字列を記載した場合、そのセルから右のセルは全て読み込み対象外となる。テストデータ自体には含めたくないが、可読性を向上させるために付加情報を記載したい場合には、コメント機能が使用できる。

以下の例では、2行目でテーブルの論理名を、4行目末尾で期待する結果についてコメントしている。

EXPECTED_TABLE=PLAYER

+----------+----------+----------+----------+----------------------------+
|NO        |FIRST_NAME|LAST_NAME |ADDRESS   |                            |
+==========+==========+==========+==========+============================+
|//番号    |名        |姓        |住所      |                            |
+----------+----------+----------+----------+----------------------------+
|0001      |Andres    |Segovia   |Spain     |                            |
+----------+----------+----------+----------+----------------------------+
|0002      |Julian    |Bream     |England   | // このレコードが追加される| 
+----------+----------+----------+----------+----------------------------+


.. _`marker_column`:  

マーカーカラム
==============

テストデータを記述する際、実際のデータには含めたくないがExcelシート上には記述しておきたい場合がある。\
前述の「コメント」を使用することにより、実際のデータには含まれない情報を記述できるが、\
「コメント」には、そのセルから右のセルを読み込み対象外にするという性質があるため、\
左端（または中央）のセルにはコメントを使用できない。

このような場合は、「マーカーカラム」を使用することで、実際のデータには含まれないが
Excelシートの見た目上は存在するデータを記述できる。

テストデータの見出し行において、\
**カラム名が半角角括弧で囲まれている場合、そのカラムは「マーカーカラム」とみなされる。**\
マーカーカラムに該当する列はテスト実行時には読み込まれない。

例えば、以下のようなテストデータがあるとする。

LIST_MAP=EXAMPLE_MARKER_COLUMN

+----+----------+----------+
|[no]|id        |name      |
+====+==========+==========+
|1   |U0001     |山田      |
+----+----------+----------+ 
|2   |U0002     |田中      |
+----+----------+----------+

上記のテストデータは、半角角括弧で囲まれているカラム[no]が無視されるため、
テスト実行時には以下のテストデータと等価となる。

LIST_MAP=EXAMPLE_MARKER_COLUMN

  +----------+----------+
  |id        |name      |
  +==========+==========+
  |U0001     |山田      |
  +----------+----------+
  |U0002     |田中      |
  +----------+----------+


ここではLIST_MAPの例を挙げたが、それ以外のデータタイプでも同様に使用できる。

セルの書式
==========

セルの書式には、文字列のみを使用する。
テストデータを作成する前に、全てのセルの書式を文字列に設定しておくこと。

罫線やセルの色付けについては任意に設定可能である。罫線やセルの色付けを行うことでデータが見やすくなり、レビュー品質や保守性の向上が期待できる。


.. important::
 | Excelファイルに文字列以外の書式でデータを記述した場合、正しくデータが読み取れなくなる。



.. _`special_notation_in_cell`:

セルへの特殊な記述方法
======================
自動テストの利便性を向上させるために、いくつかの特殊記法を提供する。
下記表が、本フレームワークで提供する特殊な記述方法となっている。


+-----------------------+----------------------------+--------------------------------------------------------------------------+
|記述方法 (セルに記述す\| 自動テスト内での値 [#]_\   |説明                                                                      |
|る値)                  |                            |                                                                          |
+=======================+============================+==========================================================================+
|null                   | null                       |セル内に、「null」 **(半角で大文字、小文字の区別はしない)** と記述されて\ |
+-----------------------+                            |いる場合は、「null」値として扱う。例えば、データベースにnull値を登録した\ |
|Null                   |                            |い場合や、期待値でnull値を設定したい場合に使用する。                      |
+-----------------------+----------------------------+--------------------------------------------------------------------------+
|"null"                 |文字列のnull                |文字列の前後がダブルクォート(半角、全角問わず)で囲われている場合は、前後\ |
+-----------------------+                            |のダブルクォートを取り除いた文字列を扱う。\ [#]_                          |
|"NULL"                 |                            |                                                                          |
+-----------------------+----------------------------+例えば、「null」や「NULL」を文字列として扱う必要がある場合には、記述方法\ |
|"1⊔"                   | 1⊔                         |にあるように 「"null"」や「"NULL"」と記述を行う。                         |
+-----------------------+----------------------------+                                                                          |
|"⊔"                    | ⊔                          |また、セルの値にスペースがあることを解りやすくする目的で、記述方法にあるよ|
+-----------------------+----------------------------+うに「"1?"」や、「"?"」とすることもできる。                               |
| "１△"                 | １△                        |                                                                          |
|                       |                            |                                                                          |
+-----------------------+----------------------------+                                                                          |
| "△△"                  | △△                         |                                                                          |
+-----------------------+----------------------------+                                                                          |
| """                   | "                          |                                                                          |
+-----------------------+----------------------------+                                                                          |
| "" [#]_               | 空文字列                   |                                                                          |
+-----------------------+----------------------------+--------------------------------------------------------------------------+
|${systemTime}          |システム日時 [#]_           |システム日時を記載したい場合に使用する                                    |
+-----------------------+                            +--------------------------------------------------------------------------+
|${updateTime}          |                            |${systemTime}の別名。特にデータベースのタイムスタンプ更新時の期待値として\|
|                       |                            |使用する。                                                                |
+-----------------------+----------------------------+--------------------------------------------------------------------------+
|${setUpTime}           |コンポーネント設定ファイルに|データベースセットアップ時のタイムスタンプに、決まった値を使用したい場合\ |
|                       |記載された固定値            |に使用する。                                                              |
+-----------------------+----------------------------+--------------------------------------------------------------------------+
|${文字種,文字数} [#]_  |指定した文字種を指定した文字|使用可能な文字列は下記の通り。                                            |
|                       |数分まで増幅した値          |                                                                          |
|                       |                            |半角英字,半角数字,半角記号,半角カナ,全角英字,全角数字,                    |
|                       |                            |全角ひらがな,全角カタカナ,全角漢字,全角記号その他,外字                    |
|                       |                            |                                                                          |
+-----------------------+----------------------------+--------------------------------------------------------------------------+
|${binaryFile:ファイルパ|BLOB列に格納するバイナリデー|BLOB列にファイルのデータを格納したい場合に使用する。                      |
|ス}                    |タ                          |ファイルパスはExcelファイルからの相対パスで記述する。                     |
+-----------------------+----------------------------+--------------------------------------------------------------------------+
|\\r                    |\ *CR*\                     |改行コードを明示的に記述する場合に使用する。 [#]_                         |
+-----------------------+----------------------------+                                                                          |
|\\n                    |\ *LF*\                     |                                                                          |
+-----------------------+----------------------------+--------------------------------------------------------------------------+


.. tip::
  **凡例**
  
  *  ⊔ は、半角スペースの意
  *  △は、全角スペースの意
  * *CR* は、改行コードCR(0x0D)の意
  * *LF* は、改行コードLF(0x0A)の意

.. [#]
 セルから読み込み後に自動テストフレームワークにて変換される。
                                                                                                 
\ 


.. [#]

  本記述方法を利用した場合であっても、文字列中のダブルクォートをエスケープする必要はない。
  以下に例を示す。

 +-----------------+----------------------------------------------------------------------------+ 
 |     記述例      | 説明                                                                       |
 +=================+============================================================================+ 
 |"ab"c"           | ab"cとして扱われる。(前後のダブルクォートが除去される。)                   |
 +-----------------+----------------------------------------------------------------------------+
 |"abc""           | abc"として扱われる。(前後のダブルクォートが除去される。)                   |
 +-----------------+----------------------------------------------------------------------------+
 | ab"c            | ab"cとして扱われる。(前後がダブルクォートではないため、そのまま扱われる。) |
 +-----------------+----------------------------------------------------------------------------+
 | abc"            | abc"として扱われる。(前後がダブルクォートではないため、そのまま扱われる。) |
 +-----------------+----------------------------------------------------------------------------+

\


.. [#] 
 この記法を使用することで、空行を表すことができる。
 『\ :ref:`how_to_express_empty_line`\ 』の項を参照。

.. [#] コンポーネント設定ファイルにて設定されたSystemTimeProvider実装クラスから取得したTimestampの文字列形式に変換される。\
 具体的には、\ `2011-04-11 01:23:45.0` というような値に変換される。


\

.. [#]
 本記法は単独でも使用可能であるし、組み合わせて使用することもできる。
 以下に例を示す。

 +--------------------------+----------------------+-----------------------------------+ 
 |          記述例          | 変換される値の例     | 説明                              |
 +==========================+======================+===================================+
 |${半角英字,5}             | geDSfe               |半角英字5文字に変換される。        |
 +--------------------------+----------------------+-----------------------------------+
 |${全角ひらがな,4}         | ぱさぇん             |全角ひらがな4文字に変換される。    |
 +--------------------------+----------------------+-----------------------------------+
 |${半角数字,2}-{半角数字4} | 37-3425              |-以外が変換される。                |
 +--------------------------+----------------------+-----------------------------------+
 |${全角漢字,4}123          | 山川海森123          |末尾123以外が変換される。          |
 +--------------------------+----------------------+-----------------------------------+

.. [#]
 
 Excelセル内の改行（Alt+Enter）は\ *LF*\ として扱われる。これは本機能とは関係のないExcelの仕様である。
 改行コードLFを表したい場合は、単にセル内で改行（Alt+Enter）すればよい。
 
 以下に例を示す。

 +--------------------------+----------------------+-----------------------------------+ 
 |          記述例          | 変換される値の例     | 説明                              |
 +==========================+======================+===================================+
 |こんにちは |br|           |こんにちは\ *LF*\     |セル内の改行（Alt+Enter）は        |
 |さようなら                |さようなら            |LF(0x0A)となる。                   |
 +--------------------------+----------------------+-----------------------------------+
 |こんにちは\\n             |こんにちは\ *LF*\     |'\\n'は本機能によりLF(0x0A)に      |
 |さようなら                |さようなら            |変換される。                       |
 +--------------------------+----------------------+-----------------------------------+
 |こんにちは\\r |br|        |こんにちは\ *CRLF*\   |'\\r'は本機能によりCR(0x0D)に      |
 |さようなら                |さようなら            |変換される。セル内の改行           |
 |                          |                      |（Alt+Enter）はLF(0x0A)となる。    |
 +--------------------------+----------------------+-----------------------------------+

--------
注意事項
--------

テストメソッドの実行順序に依存しないテストを作成する
====================================================

テストソースコード、テストデータ作成時には、テストメソッドの実行順序によって、テスト結果が変わらないように留意する。単に順序だけでなく、クラス単体でテストしても、複数まとめてテストしても同じ結果にならなければならない。


特に、本フレームワークではテスト中にコミットが行われるため、前後のテストによってデータベースの内容が変更される可能性が高い。\
よって、自テストクラスで必要となる事前条件については、全て自テストクラス内で準備するようにしておかなければならない。

これにより、以下のような効果が得られる。

* テストの実行順序によって偶然テストが失敗したり偶然成功する、という事態を防ぐ。
* そのテストのデータまたはソースコードだけで、事前条件が分かる。

マスタデータのような基本的に読み取り専用のテーブルの準備については、共通のExcelファイルを用意してそこに記載すること。テスト実行前に1回だけ実行するか、テスト実行前に事前に準備済みという前提でテストを実行するようにする。

この手法には、以下のようなメリットがある。

* マスタ系のデータを、プロジェクト全体で再利用できる。
* テストデータのメンテナンスが容易になる。
* テスト実行速度が上がる。

.. tip::
 マスタデータの投入には、\ :ref:`master_data_setup_tool`\ を使用する。\
 また、\ :doc:`04_MasterDataRestore`\ により、テスト内で発生したマスタデータの変更をテスト終了時に自動的に元の状態に戻すことができる。これにより、マスタデータに変更が必要なテストケースであっても、他のテストケースに影響無く実行できる。



テストデータは全てExcelシートに記述する
=======================================

Excelとテストソースコードとでテストデータが混在していると、可読性、保守性が低下してしまう。テストソースコード中にはテストデータを記載せず、テストデータは全てExcelシートに記載すること。

* Excelシートを見れば、テストケースのバリエーションを把握することができる。
* テストデータはExcelシート、テストロジックはテストソースコードと役割分担が明確になる。
* Excelシートを読み込む構造にしておくことで、容易にテストケースを追加できる。
* テストソースコードの重複を大幅に削減できる(テストソースコード中に単純にリテラル値でデータを記載すると、データのバリエーションが増加すると重複したコードが作られてしまう)。

.. _auto-test-framework_multi-datatype:

複数のデータタイプ使用時はデータタイプごとにまとめてデータを記述する
============================================================================
複数のデータタイプを使用する場合、使用するデータタイプごとにまとめてデータを記述すること。
複数のデータタイプを混在させてデータを記述してしまうと、データの読み込みが途中で終了しテストが正しく実行されない。

例えば、 以下のようにデータタイプを記述した場合、 ``TABLE2`` までのデータしか評価されず、
``TABLE3`` 以降のデータに誤りがあってもテストは成功してしまう。

.. code-block:: text

  EXPECTED_TABLE=TABLE1
  :
  EXPECTED_COMPLETE_TABLE=TABLE2
  :
  EXPECTED_TABLE=TABLE3
  :
  EXPECTED_COMPLETE_TABLE=TABLE4
  :

全てのデータが正しく評価されるようにするには、
以下のようにデータタイプごとにまとめてデータを記述すること。

.. code-block:: text

  EXPECTED_TABLE=TABLE1
  :
  EXPECTED_TABLE=TABLE3
  :
  EXPECTED_COMPLETE_TABLE=TABLE2
  :
  EXPECTED_COMPLETE_TABLE=TABLE4
  :

.. |br| raw:: html

  <br />