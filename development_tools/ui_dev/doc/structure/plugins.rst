===================================
UIプラグイン
===================================
UI開発基盤では、すべての成果物を **UIプラグイン** と呼ばれる単位で管理している。
いいかえると、UI開発基盤の実体は **UIプラグイン** の集まりそのものである。

各 **UIプラグイン** は、単一の機能や目的に対して作成される。
そのため、1つの **UIプラグイン** には、その機能を実現するために必要な成果物一式が全て含まれる。
(タグファイル、JavaScript、css、テスト/サンプルコードなど)

適用プロジェクト側でUI開発基盤のカスタマイズを行う場合は、
対応するプラグインをコピーした上で、必要な改修を行ことになる。
(カスタマイズ作業については :doc:`../development_environment/modifying_code_and_testing` を参照すること。)


以下の表は、UI開発基盤に含まれる **UIプラグイン** の分類を表したものである。

  ====================== =========================================== ====================================
  カテゴリ               内容                                        カテゴリ内の主要プラグイン
  ====================== =========================================== ====================================
  外部ライブラリ         サードパーティ製ライブラリ                  - jQuery(DOM API抽象化)
                         **(プロジェクト側でのカスタマイズは不可)**  - sugarjs(ネイティブAPI拡張・ES5ポリフィル)
                                                                     - requirejs(動的スクリプトロード・ミニファイ)
                                                                     - fontawesome(アイコン用WebFont)

  コアJS部品             JavaScriptで実装された共通処理              - スクリプトロード/ドキュメントロード共通処理
                         とスクリプトロードを定義するインクルード    - Nablarch Submit機能連動カスタムイベント
                         **(プロジェクト側でのカスタマイズは不可)**  - JavaScriptウィジェット共通基底クラス


  コアスタイル定義       スタイル定義の基盤となる共通定義。          - CSS3プロパティ互換CSSクラス定義
                         **(プロジェクト側でのカスタマイズは不可)**  - CSSリセット
                                                                     - 基本要素スタイル定義
                                                                     - CSSグリッドフレームワーク

  共通スタイル変数       画面全体で共通的に参照するスタイル変数定義  - カラースキーム定義
                         いわゆる「デザインテーマ」を構成する        - タイポグラフィ定義
                                                                     - グリッドサイズ定義

  動作環境適合用部品     各種ブラウザ、デバイス間の差異を吸収する    - ユーザエージェント判定と環境固有部品ロード
                         ための基盤を定義する。                      - 表示モード制御(Media Query)
                         各環境に適合するためのCSS/JavaScript/       - ワイド表示モードレイアウト
                         インクルードファイルと、それらを適宜ロード  - コンパクト表示モードレイアウト
                         するための部品とから構成される。            - ナロー表示モードレイアウト
                                                                     - iOS6/7 用パッチ

  ページテンプレート     業務画面の構成を定義する                    - 業務画面テンプレート(2カラムレイアウト)
                         テンプレートタグファイルおよびスタイル定義  - 共通エラー画面テンプレート
                                                                     - サブウィンドウテンプレート

  業務共通領域           業務画面の共通領域を描画するインクルード    - 共通ヘッダー領域
                         およびスタイル定義                          - サイドメニュー領域

  UIウィジェット         画面内の各UI部品を描画するタグファイルと    - プルダウンメニュー入力ウィジェット
                         それに付随するJavaScriptやCSSなどからなる。 - カレンダー日付入力ウィジェット
                         UI標準の「UI部品カタログ」に記載された      - 確定ボタンウィジェット
                         各部品に対応する。                          - 検索結果表示用テーブルウィジェット

  UIイベント部品         一般的な業務画面で使われる動的処理を        - イベントリスナーウィジェット
                         マークアップによる宣言的な定義で実装する    - サブウィンドウイベントリスナーウィジェット
                         部品群。                                    - Ajaxリクエスト送信アクション
                                                                     - 活性/非活性制御アクション
                                                                     - ダイアログ表示アクション

  JSPローカル表示機能    ブラウザのみで業務画面JSPのプレビューと     - JSPローカルレンダリング用JavaScript
                         動作デモを行うために必要な各種部品群。      - jstlタグライブラリスタブ
                                                                     - nablarchタグライブラリスタブ

  画面設計書表示機能     JSPローカル表示機能の拡張機能である         - 画面設計書テンプレートファイル
                         画面設計書ビュー表示を実装する部品群        - 画面設計書ビュー描画エンジン

  開発用コマンド         UI開発基盤上で作業をすすめる際に使用する    - ビルドコマンド
                         各種ツール。                                - JSP規約チェック
                                                                     - サーバ動作確認用サーバ起動コマンド
                                                                     - ローカル動作確認用サーバ起動コマンド

  ====================== =========================================== ====================================


--------------------
UIプラグインの構造
--------------------
先に述べたように、1つのプラグインには、その機能を実現するために必要な様々なリソースおよび、
ドキュメントとテストが含まれる。

以下はプラグインのファイル構成を示した図である。
( **UIウィジェット:カレンダー日付入力ウィジェットプラグイン** の例)

.. code-block:: bash

    nablarch-widget-field-calendar    # プラグイントップ
      ├── package.json                # プラグイン依存関係定義
      ├── bin                         # 開発用コマンド
      ├── ui_local                    # ローカル表示/開発用コマンドソースコード
      │    └── js
      ├── ui_public                   # サーバ動作成果物(サーブレットコンテキスト配下の配置物)
      │    ├── css
      │    │     └── ui
      │    │            └── field-calendar.less
      │    ├── img
      │    ├── js
      │    │     └── nablarch
      │    │           └── ui
      │    │                 ├── DatePicker.js
      │    │                 └── DatePicker.template
      │    └── WEB-INF
      │          ├── include
      │          └── tags
      │                └── widget
      │                      └── field
      │                            └── calendar.tag
      └── ui_test                     # テスト/動作デモ用ソースコード

.. important::

  UIプラグインが提供するJSPは、原則 ``WEB-INF`` 配下に配置する。
  ただし、 ``ui_test`` 配下にテスト用に作成したJSPは、 :ref:`サーバ稼働確認 <ui_test_server>` にて、ブラウザから直接JSPにアクセスする。
  このため、 ``WEB-INF`` 配下ではなく ``ui_test`` 配下にディレクトリを作成して配置する必要がある。

--------------------------------------
UIプラグインのバージョンについて
--------------------------------------
各プラグインごとに、以下の形式でバージョニングが行われる。

  .. code-block:: bash

    (メジャーバージョン) . (マイナーバージョン) . (バッチ番号)

各番号の意味は下記のとおりである。

====================== ====================================================== ===========
区分                   意味                                                   初期値
====================== ====================================================== ===========
メジャーバージョン     後方互換性を持たない修正に対してインクリメントする。   **1**

                       .. important::

                         後方互換性をもたない修正は、通常、
                         個別の派生プラグインとして開発することになるため
                         実際の運用では **1** 固定となる。

マイナーバージョン     後方互換性を保つ修正(基本的には機能追加)               **0**
                       に対してインクリメントする。

パッチ番号             後方互換性を保つ不具合の修正に対して                   **0**
                       インクリメントする。

====================== ====================================================== ===========
